// Generated by rstantools.  Do not edit by hand.

/*
    MIRES is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    MIRES is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with MIRES.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_dpExp_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_dpExp");
    reader.add_event(71, 69, "end", "model_dpExp");
    return reader;
}
template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, 1>
break_that_stick(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& stick_slices, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 3;
        int K(0);
        (void) K;  // dummy to suppress unused var warning
        stan::math::fill(K, std::numeric_limits<int>::min());
        stan::math::assign(K,(num_elements(stick_slices) + 1));
        current_statement_begin__ = 4;
        validate_non_negative_index("pi", "K", K);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> pi(K);
        stan::math::initialize(pi, DUMMY_VAR__);
        stan::math::fill(pi, DUMMY_VAR__);
        current_statement_begin__ = 5;
        stan::model::assign(pi, 
                    stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                    get_base1(stick_slices, 1, "stick_slices", 1), 
                    "assigning variable pi");
        current_statement_begin__ = 6;
        for (int k = 2; k <= (K - 1); ++k) {
            current_statement_begin__ = 7;
            stan::model::assign(pi, 
                        stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list()), 
                        (get_base1(stick_slices, k, "stick_slices", 1) * prod(subtract(1, stan::model::rvalue(stick_slices, stan::model::cons_list(stan::model::index_min_max(1, (k - 1)), stan::model::nil_index_list()), "stick_slices")))), 
                        "assigning variable pi");
        }
        current_statement_begin__ = 10;
        stan::model::assign(pi, 
                    stan::model::cons_list(stan::model::index_uni(K), stan::model::nil_index_list()), 
                    prod(subtract(1, stan::model::rvalue(stick_slices, stan::model::cons_list(stan::model::index_min_max(1, (K - 1)), stan::model::nil_index_list()), "stick_slices"))), 
                    "assigning variable pi");
        current_statement_begin__ = 12;
        return stan::math::promote_scalar<fun_return_scalar_t__>(pi);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct break_that_stick_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, 1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& stick_slices, std::ostream* pstream__) const {
        return break_that_stick(stick_slices, pstream__);
    }
};
#include <stan_meta_header.hpp>
class model_dpExp
  : public stan::model::model_base_crtp<model_dpExp> {
private:
        int N;
        int K;
        vector_d y;
public:
    model_dpExp(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_dpExp(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_dpExp_namespace::model_dpExp";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 17;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];
            current_statement_begin__ = 18;
            context__.validate_dims("data initialization", "K", "int", context__.to_vec());
            K = int(0);
            vals_i__ = context__.vals_i("K");
            pos__ = 0;
            K = vals_i__[pos__++];
            current_statement_begin__ = 19;
            validate_non_negative_index("y", "N", N);
            context__.validate_dims("data initialization", "y", "vector_d", context__.to_vec(N));
            y = Eigen::Matrix<double, Eigen::Dynamic, 1>(N);
            vals_r__ = context__.vals_r("y");
            pos__ = 0;
            size_t y_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < y_j_1_max__; ++j_1__) {
                y(j_1__) = vals_r__[pos__++];
            }
            // initialize transformed data variables
            // execute transformed data statements
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 28;
            num_params_r__ += 1;
            current_statement_begin__ = 29;
            validate_non_negative_index("stick_slices", "(K - 1)", (K - 1));
            num_params_r__ += (K - 1);
            current_statement_begin__ = 32;
            validate_non_negative_index("rate", "K", K);
            num_params_r__ += K;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_dpExp() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 28;
        if (!(context__.contains_r("alpha")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable alpha missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("alpha");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "alpha", "double", context__.to_vec());
        double alpha(0);
        alpha = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, alpha);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable alpha: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 29;
        if (!(context__.contains_r("stick_slices")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable stick_slices missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("stick_slices");
        pos__ = 0U;
        validate_non_negative_index("stick_slices", "(K - 1)", (K - 1));
        context__.validate_dims("parameter initialization", "stick_slices", "vector_d", context__.to_vec((K - 1)));
        Eigen::Matrix<double, Eigen::Dynamic, 1> stick_slices((K - 1));
        size_t stick_slices_j_1_max__ = (K - 1);
        for (size_t j_1__ = 0; j_1__ < stick_slices_j_1_max__; ++j_1__) {
            stick_slices(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lub_unconstrain(0, 1, stick_slices);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable stick_slices: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 32;
        if (!(context__.contains_r("rate")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable rate missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("rate");
        pos__ = 0U;
        validate_non_negative_index("rate", "K", K);
        context__.validate_dims("parameter initialization", "rate", "vector_d", context__.to_vec(K));
        Eigen::Matrix<double, Eigen::Dynamic, 1> rate(K);
        size_t rate_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < rate_j_1_max__; ++j_1__) {
            rate(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(0, rate);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable rate: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 28;
            local_scalar_t__ alpha;
            (void) alpha;  // dummy to suppress unused var warning
            if (jacobian__)
                alpha = in__.scalar_lb_constrain(0, lp__);
            else
                alpha = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 29;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> stick_slices;
            (void) stick_slices;  // dummy to suppress unused var warning
            if (jacobian__)
                stick_slices = in__.vector_lub_constrain(0, 1, (K - 1), lp__);
            else
                stick_slices = in__.vector_lub_constrain(0, 1, (K - 1));
            current_statement_begin__ = 32;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> rate;
            (void) rate;  // dummy to suppress unused var warning
            if (jacobian__)
                rate = in__.vector_lb_constrain(0, K, lp__);
            else
                rate = in__.vector_lb_constrain(0, K);
            // transformed parameters
            current_statement_begin__ = 37;
            validate_non_negative_index("pi", "K", K);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> pi(K);
            stan::math::initialize(pi, DUMMY_VAR__);
            stan::math::fill(pi, DUMMY_VAR__);
            stan::math::assign(pi,sort_desc(break_that_stick(stick_slices, pstream__)));
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 37;
            size_t pi_j_1_max__ = K;
            for (size_t j_1__ = 0; j_1__ < pi_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(pi(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: pi" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable pi: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            check_greater_or_equal(function__, "pi", pi, 0);
            check_less_or_equal(function__, "pi", pi, 1);
            // model body
            {
            current_statement_begin__ = 43;
            validate_non_negative_index("log_pi", "K", K);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> log_pi(K);
            stan::math::initialize(log_pi, DUMMY_VAR__);
            stan::math::fill(log_pi, DUMMY_VAR__);
            stan::math::assign(log_pi,stan::math::log(pi));
            current_statement_begin__ = 46;
            lp_accum__.add(normal_log<propto__>(rate, 0, 3));
            current_statement_begin__ = 48;
            lp_accum__.add(gamma_log<propto__>(alpha, 2, 2));
            current_statement_begin__ = 49;
            lp_accum__.add(beta_log<propto__>(stick_slices, 1, alpha));
            current_statement_begin__ = 57;
            for (int n = 1; n <= N; ++n) {
                {
                current_statement_begin__ = 58;
                validate_non_negative_index("lp_y", "K", K);
                Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> lp_y(K);
                stan::math::initialize(lp_y, DUMMY_VAR__);
                stan::math::fill(lp_y, DUMMY_VAR__);
                stan::math::assign(lp_y,log_pi);
                current_statement_begin__ = 59;
                for (int k = 1; k <= K; ++k) {
                    current_statement_begin__ = 60;
                    stan::model::assign(lp_y, 
                                stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list()), 
                                (stan::model::rvalue(lp_y, stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list()), "lp_y") + exponential_log(get_base1(y, n, "y", 1), get_base1(rate, k, "rate", 1))), 
                                "assigning variable lp_y");
                }
                current_statement_begin__ = 62;
                lp_accum__.add(log_sum_exp(lp_y));
                }
            }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("alpha");
        names__.push_back("stick_slices");
        names__.push_back("rate");
        names__.push_back("pi");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((K - 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_dpExp_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        double alpha = in__.scalar_lb_constrain(0);
        vars__.push_back(alpha);
        Eigen::Matrix<double, Eigen::Dynamic, 1> stick_slices = in__.vector_lub_constrain(0, 1, (K - 1));
        size_t stick_slices_j_1_max__ = (K - 1);
        for (size_t j_1__ = 0; j_1__ < stick_slices_j_1_max__; ++j_1__) {
            vars__.push_back(stick_slices(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> rate = in__.vector_lb_constrain(0, K);
        size_t rate_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < rate_j_1_max__; ++j_1__) {
            vars__.push_back(rate(j_1__));
        }
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 37;
            validate_non_negative_index("pi", "K", K);
            Eigen::Matrix<double, Eigen::Dynamic, 1> pi(K);
            stan::math::initialize(pi, DUMMY_VAR__);
            stan::math::fill(pi, DUMMY_VAR__);
            stan::math::assign(pi,sort_desc(break_that_stick(stick_slices, pstream__)));
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 37;
            check_greater_or_equal(function__, "pi", pi, 0);
            check_less_or_equal(function__, "pi", pi, 1);
            // write transformed parameters
            if (include_tparams__) {
                size_t pi_j_1_max__ = K;
                for (size_t j_1__ = 0; j_1__ < pi_j_1_max__; ++j_1__) {
                    vars__.push_back(pi(j_1__));
                }
            }
            if (!include_gqs__) return;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_dpExp";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "alpha";
        param_names__.push_back(param_name_stream__.str());
        size_t stick_slices_j_1_max__ = (K - 1);
        for (size_t j_1__ = 0; j_1__ < stick_slices_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "stick_slices" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t rate_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < rate_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "rate" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t pi_j_1_max__ = K;
            for (size_t j_1__ = 0; j_1__ < pi_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "pi" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "alpha";
        param_names__.push_back(param_name_stream__.str());
        size_t stick_slices_j_1_max__ = (K - 1);
        for (size_t j_1__ = 0; j_1__ < stick_slices_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "stick_slices" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t rate_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < rate_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "rate" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t pi_j_1_max__ = K;
            for (size_t j_1__ = 0; j_1__ < pi_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "pi" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
    }
}; // model
}  // namespace
typedef model_dpExp_namespace::model_dpExp stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
